## Test

```catala
declaration scope A:
  internal a content integer
  output b content integer
  input c content integer
  input output d content integer
  context e content integer
  context output f content integer


scope A:
  definition a equals 0
  definition b equals a + 1
  definition e equals b + c + d + 1
  definition f equals e + 1
```

```catala-test-inline
$ catala Dcalc -s A
let A =
  λ (A_in: A_in {"c_in": integer; "d_in": integer; "e_in": unit → integer;
              "f_in": unit → integer}) →
    let c : integer = A_in."c_in" in
    let d : integer = A_in."d_in" in
    let e : unit → integer = A_in."e_in" in
    let f : unit → integer = A_in."f_in" in
    let a : integer = error_empty ⟨true ⊢ 0⟩ in
    let b : integer = error_empty ⟨true ⊢ a +! 1⟩ in
    let e1 : integer = error_empty
      ⟨e () | true ⊢ ⟨true ⊢ b +! c +! d +! 1⟩⟩ in
    let f1 : integer = error_empty
      ⟨f () | true ⊢ ⟨true ⊢ e1 +! 1⟩⟩ in
    A { "b"= b; "d"= d; "f"= f1 }
```

```catala-test-inline
$ catala Typecheck -s A
[RESULT] Typechecking successful!
```
